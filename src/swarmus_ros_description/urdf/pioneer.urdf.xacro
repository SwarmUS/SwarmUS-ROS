<?xml version="1.0" ?>
<robot name="pioneer_swarmus"
  xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:arg name="prefix" default="p_swarmus"/>
  <xacro:arg name="color" default="DepthMapVS"/>
  <xacro:arg name="camera_type" default="d435i"/>
  <xacro:property name="camera_type" value="$(arg camera_type)"/>
  
  <xacro:arg name="is_simulation" default="false"/>
  <xacro:property name="is_simulation" value="$(arg is_simulation)"/>

  <link name="$(arg prefix)/base_footprint" />
  <link name="$(arg prefix)/base_link" />

  <xacro:property name="M_PI" value="3.1415926535897931" />
  <xacro:property name="wheel_radius" value="0.0825" />
  <xacro:property name="base_width" value="0.32" />

  <!-- ================================== Links ==================================-->
  <link name="$(arg prefix)/chassis">
    <inertial>
      <mass value="5.67"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.07" ixy="0" ixz="0" iyy="0.08" iyz="0" izz="0.10"/>
    </inertial>
    <collision name="collision">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.445 0.277 0.17"/>
      </geometry>
    </collision>
    <collision name="caster_collision">
      <origin rpy="0 0 0" xyz="-0.2 0 ${-wheel_radius - 0.05 + 0.04}"/>
      <geometry>
        <sphere radius="0.04"/>
      </geometry>
    </collision>
    <visual name="visual">
      <origin rpy="0 0 0" xyz="0 0 0.04"/>
      <geometry>
        <mesh filename="package://swarmus_ros_description/meshes/chassis.dae" scale="1.0 1.0 1.0"/>
      </geometry>
    </visual>
    <visual name="caster_visual">
      <origin rpy="0 0 0" xyz="-0.2 0 ${-wheel_radius - 0.05 + 0.04}"/>
      <geometry>
        <sphere radius="0.04"/>
      </geometry>
    </visual>
  </link>

  <link name="$(arg prefix)/right_wheel">
    <inertial>
      <mass value="1.5"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0051" ixy="0" ixz="0" iyy="0.0051" iyz="0" izz="0.0090"/>
    </inertial>
    <collision name="collision">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.05" radius="${wheel_radius}"/>
      </geometry>
    </collision>
    <visual name="visual">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.05" radius="${wheel_radius}"/>
      </geometry>
    </visual>
  </link>

  <link name="$(arg prefix)/left_wheel">
    <inertial>
      <mass value="1.5"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.0051" ixy="0" ixz="0" iyy="0.0051" iyz="0" izz="0.0090"/>
    </inertial>
    <collision name="collision">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.05" radius="${wheel_radius}"/>
      </geometry>
    </collision>
    <visual name="visual">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <cylinder length="0.05" radius="${wheel_radius}"/>
      </geometry>
    </visual>
  </link>

  <xacro:if value="${camera_type == 'd435i'}">
    <xacro:include filename="$(find realsense2_description)/urdf/_d435i.urdf.xacro"/>

    <xacro:sensor_d435i parent="$(arg prefix)/chassis" name="$(arg prefix)/camera" use_nominal_extrinsics="${is_simulation}">
      <origin xyz="0.16773 0 0.14602" rpy="0 -0.174553 0"/>
    </xacro:sensor_d435i>
  </xacro:if>
  
  <xacro:if value="${camera_type == 'd455'}">
    <xacro:include filename="$(find realsense2_description)/urdf/_d455.urdf.xacro"/>
    
    <xacro:sensor_d455 parent="$(arg prefix)/chassis" name="$(arg prefix)/camera" use_nominal_extrinsics="${is_simulation}">
      <origin xyz="0.16822 0 0.14357" rpy="0 -0.174553 0"/>
    </xacro:sensor_d455>
  </xacro:if>

  <link name="$(arg prefix)/rplidar">
    <inertial>
      <mass value="0.1"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0" ixy="0" ixz="0" iyy="0" iyz="0" izz="0"/>
    </inertial>
    <collision name="collision">
      <origin rpy="0 0 0" xyz="0 0 -0.0145"/>
      <geometry>
        <box size="0.05 0.05 0.041"/>
      </geometry>
    </collision>
    <collision name="collision_top">
      <origin rpy="0 0 0" xyz="0 0 0.0205"/>
      <geometry>
        <cylinder radius="0.021" length="0.029"/>
      </geometry>
    </collision>
    <visual name="visual">
      <geometry>
        <mesh filename="package://swarmus_ros_description/meshes/hokuyo.dae" scale="1.0 1.0 1.0"/>
      </geometry>
    </visual>
  </link>

  <link name="$(arg prefix)/hiveboard">
    <inertial>
      <mass value="0.0000001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.00001" ixy="0" ixz="0" iyy="0.00001" iyz="0" izz="0.00001"/>
    </inertial>
    <visual name="visual">
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.07 0.07 0.02"/>
      </geometry>
      <material name="Orange">
        <color rgba="1.0 0.622 0.0 1"/>
      </material>
    </visual>
  </link>


  <!-- ================================== Joints ==================================-->
  <joint name="base_footprint_link_joint" type="fixed">
    <origin xyz="-0.1 0 ${wheel_radius + 0.05}" rpy="0 0 0" />
    <parent link="$(arg prefix)/base_footprint"/>
    <child link="$(arg prefix)/base_link" />
  </joint>

  <joint name="base_link_chassis_joint" type="fixed">
    <origin xyz="0 0 0.0" rpy="0 0 0" />
    <parent link="$(arg prefix)/base_link" />
    <child link="$(arg prefix)/chassis" />
  </joint>

  <joint name="left_wheel_hinge" type="continuous">
    <parent link="$(arg prefix)/chassis"/>
    <child link="$(arg prefix)/left_wheel"/>
    <origin rpy="0 1.5707 1.5707" xyz="0.1 ${base_width/2} -0.05"/>
    <axis xyz="9.00000000e-05 9.00000000e-05 1.00000000e+00"/>
    <limit effort="100.0" velocity="100"/>
  </joint>

  <joint name="right_wheel_hinge" type="continuous">
    <parent link="$(arg prefix)/chassis"/>
    <child link="$(arg prefix)/right_wheel"/>
    <origin rpy="0 1.5707 1.5707" xyz="0.1 ${-base_width/2}  -0.05"/>
    <axis xyz="9.00000000e-05 9.00000000e-05 1.00000000e+00"/>
    <limit effort="100.0" velocity="100"/>
  </joint>

  <joint name="rplidar_joint" type="fixed">
    <child link="$(arg prefix)/rplidar"/>
    <parent link="$(arg prefix)/chassis" />
    <origin rpy="0 0 ${-M_PI*3/4}" xyz="0.02378 0 0.19709"/>
  </joint>

  <joint name="hiveboard_joint" type="fixed">
    <child link="$(arg prefix)/hiveboard"/>
    <parent link="$(arg prefix)/chassis"/>
    <origin rpy="0 0 0" xyz="-0.1 0.0 0.12"/>
  </joint>
  <!-- ================================== Gazebo plugin ================================== -->

  <gazebo reference="$(arg prefix)/chassis">
    <mu1 value="0.0"/>
    <mu2 value="0.0"/>
    <kp value="1.0" />
    <kd value="1.0" />
    <!-- material>Gazebo/$(arg color)</material-->
  </gazebo>

  <gazebo reference="$(arg prefix)/right_wheel">
    <mu1 value="100000.0"/>
    <mu2 value="100000.0"/>
    <kp value="0.0" />
    <kd value="0.0" />
    <!-- material>Gazebo/$(arg color)</material-->
  </gazebo>

  <gazebo reference="$(arg prefix)/left_wheel">
    <mu1 value="100000.0"/>
    <mu2 value="100000.0"/>
    <kp value="0.0" />
    <kd value="0.0" />
    <!-- material>Gazebo/$(arg color)</material-->
  </gazebo>

  <xacro:if value="${is_simulation}">
    <gazebo>
      <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so"/>
    </gazebo>

    <gazebo>
      <plugin name="differential_drive" filename="libgazebo_ros_diff_drive.so">
        <commandTopic>cmd_vel</commandTopic>
        <odometryTopic>odom</odometryTopic>
        <odometryFrame>odom</odometryFrame>
        <odometrySource>world</odometrySource>
        <publishOdomTF>true</publishOdomTF>
        <robotBaseFrame>base_footprint</robotBaseFrame>
        <publishWheelTF>false</publishWheelTF>
        <publishTf>true</publishTf>
        <publishWheelJointState>true</publishWheelJointState>
        <legacyMode>false</legacyMode>
        <updateRate>50</updateRate>
        <leftJoint>left_wheel_hinge</leftJoint>
        <rightJoint>right_wheel_hinge</rightJoint>
        <wheelSeparation>${base_width}</wheelSeparation>
        <wheelDiameter>${2*wheel_radius}</wheelDiameter>
        <wheelAcceleration>0.6</wheelAcceleration>
        <wheelTorque>10</wheelTorque>
        <rosDebugLevel>true</rosDebugLevel>
      </plugin>
    </gazebo>

    <gazebo reference="$(arg prefix)/rplidar">
        <sensor name="laser" type="ray">
          <pose>0.01 0 0.0175 0 -0 0</pose>
          <ray>
            <scan>
              <horizontal>
                <!-- Specs from racecar's rplidar -->
                <samples>360</samples>
                <resolution>1</resolution>
                <min_angle>-3.12413907051</min_angle>
                <max_angle>3.12413907051</max_angle>
              </horizontal>
            </scan>
            <range>
              <min>0.15</min>
              <max>12</max>
              <resolution>0.01</resolution>
            </range>
          </ray>
          <plugin name="laser" filename="libRayPlugin.so" />
          <plugin name="gazebo_ros_hokuyo_controller" filename="libgazebo_ros_laser.so">
            <robotNamespace>$(arg prefix)</robotNamespace>
            <topicName>scan</topicName>
            <frameName>rplidar</frameName>
          </plugin>
          <always_on>1</always_on>
          <update_rate>10</update_rate>
          <visualize>false</visualize>
        </sensor>
    </gazebo>

    <gazebo reference="$(arg prefix)/camera_depth_frame">
      <sensor name="camera" type="depth">
        <update_rate>30</update_rate>
        <camera>
          <xacro:if value="${camera_type == 'd435i'}">
            <horizontal_fov>1.117</horizontal_fov> <!-- 64 deg field of view of the RGDB sensor used since its smaller than the depth FOV-->
          </xacro:if>
          <xacro:if value="${camera_type == 'd455'}">
            <horizontal_fov>1.501</horizontal_fov> <!-- 86 deg field of view of the depth sensor used- since its smaller than the RGBD value-->
          </xacro:if>
          <image>
              <width>1280</width>
              <height>720</height>
              <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.05</near>
            <far>20</far>
          </clip>
        </camera>
        <plugin name="camera_plugin" filename="libgazebo_ros_openni_kinect.so">
          <robotNamespace>$(arg prefix)</robotNamespace>
          <baseline>0.2</baseline>
          <alwaysOn>true</alwaysOn>
          <!-- Keep this zero, update_rate in the parent <sensor> tag will control the frame rate. -->
          <updateRate>0.0</updateRate>
          <cameraName>camera</cameraName>
          <imageTopicName>color/image_raw</imageTopicName>
          <cameraInfoTopicName>color/camera_info</cameraInfoTopicName>
          <depthImageTopicName>depth/image_rect_raw</depthImageTopicName>
          <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
          <pointCloudTopicName>depth/color/points</pointCloudTopicName>
          <xacro:if value="${camera_type == 'd435i'}">
            <pointCloudCutoff>0.3</pointCloudCutoff>
            <pointCloudCutoffMax>3</pointCloudCutoffMax>
          </xacro:if>
          <xacro:if value="${camera_type == 'd455'}">
            <pointCloudCutoff>0.6</pointCloudCutoff>
            <pointCloudCutoffMax>6</pointCloudCutoffMax>
          </xacro:if>
          <frameName>camera_depth_optical_frame</frameName>
          <distortionK1>0</distortionK1>
          <distortionK2>0</distortionK2>
          <distortionK3>0</distortionK3>
          <distortionT1>0</distortionT1>
          <distortionT2>0</distortionT2>
          <CxPrime>0</CxPrime>
          <Cx>0</Cx>
          <Cy>0</Cy>
          <focalLength>0</focalLength>
          <hackBaseline>0</hackBaseline>
        </plugin>
      </sensor>
      <material>Gazebo/$(arg color)</material>
    </gazebo>

    <gazebo reference="$(arg prefix)/camera_accel_optical_frame">
      <gravity>true</gravity>
      <sensor name="imu_sensor" type="imu">
        <alwaysOn>true</alwaysOn>
        <update_rate>100</update_rate>
        <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
          <robotNamespace>$(arg prefix)</robotNamespace>
          <topicName>camera/imu</topicName>
          <bodyName>$(arg prefix)/camera_accel_optical_frame</bodyName>
          <updateRateHZ>100</updateRateHZ>
          <gaussianNoise>0.0</gaussianNoise>
          <xyzOffset>0 0 0</xyzOffset>
          <rpyOffset>0 0 0</rpyOffset>
          <frameName>$(arg prefix)/camera_accel_optical_frame</frameName>
          <initialOrientationAsReference>false</initialOrientationAsReference>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:if>
</robot>
