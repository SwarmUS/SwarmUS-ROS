
TrajectoryPlannerROS:
  # Robot configuration parameters
  max_vel_x: 0.3
  min_vel_x: 0.025
  acc_lim_x: 0.6
  escape_vel: -0.1
  escape_reset_dist: 0.1

  max_vel_theta: 1
  min_vel_theta: -1
  min_in_place_vel_theta: 0.2
  acc_lim_theta: 3.70
  escape_reset_theta: 1.5707


  holonomic_robot: false
  
  # Goal tolerance parameters
  xy_goal_tolerance: 0.1
  yaw_goal_tolerance: 0.05
  latch_xy_goal_tolerance: true
  
  # Foward simulation parameters
  sim_time: 3
  sim_granularity: 0.025                  # Distance between steps in each trajectory
  angular_sim_granularity: 0.01
  vx_samples: 6                           # Number of trajectory evaluated evaluation between min_vel_x and max_vel_x
  vtheta_samples: 20                      # Number of trajectory evaluated over min_vel_theta to 1max_vel_theta for each vx_samples
  controller_frequency: 20.0

 # Trajectory scoring parameters
 # cost = pdist_scale * (dist_trajectoryEnd_to_path) + gdist_scale * (dist_trajectoryEnd_to_localGoal) + occdist_sclae * (maximum obstacle cost along the trajectory cost (0-254))
  meter_scoring: true
  path_distance_bias: 0.6                          # The weighting for how much the controller should stay close to the path it was given, maximal possible value is 5.0
  goal_distance_bias: 0.8                          # The weighting for how much the controller should attempt to reach its local goal, also controls speed, maximal possible value is 5.0 
  occdist_scale: 0.01                      # The weighting for how much the controller should attempt to avoid obstacles 
  heading_lookahead: 0.7                  # How far to look ahead in meters when scoring different in-place-rotation trajectories 
  
  heading_scoring: false                  # Whether to score based on the robot's heading to the path or its distance from the path 
  heading_scoring_timestep : 0.8          # heading_scoring_timestep
  dwa: true                               # hether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout 
  publish_cost_grid_pc: true              # Whether or not to publish the cost grid that the planner will use when planning. When true, a sensor_msgs/PointCloud2 will be available on the ~<name>/cost_cloud topic. Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account.
  global_frame_id: $(arg robot_name)/odom # The frame to set for the cost_cloud. Should be set to the same frame as the local costmap's global frame.
  
  prune_plan: true                        # Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.

  # Osciillation prevention parameters
  oscillation_reset_dist: 0.001             # How far the robot must travel in meters before oscillation flags are reset

