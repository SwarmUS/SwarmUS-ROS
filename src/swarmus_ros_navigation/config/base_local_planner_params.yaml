
TrajectoryPlannerROS:
  # Robot configuration parameters
  max_vel_x: 0.3                          # Match the desired speed limit set by SwarmUS
  min_vel_x: -0.29                         # Lowest speed used for the forward trajectory calculation. Set to keep "min_vel_x * sim_time <  0.5 * xy_goal_tolerance"
  acc_lim_x: 2.5                          # Match the set maximum acceleration of the roboclaw controller of the Pioneer robot
  escape_vel: -0.1                        # Speed used to unstuck the robot
  escape_reset_dist: 0.15                  # Distance that must be traveled during escape before considering the robot is unstuck

  max_vel_theta: 1                        # Max angular speed used by the trajectory calculation. Match the desired speed limit set by SwarmUS
  min_vel_theta: -1                       # Minimum angular speed used by the trajectory calculation..Match the desired speed limit set by SwarmUS
  min_in_place_vel_theta: 0.4             # Lowest speed used for the forward trajectory calculation.
  acc_lim_theta: 3.70                     # Angular acceleration limit based the acc_lim_x
  escape_reset_theta: 1.5707              # Angle that must be traveled during escape before considering the robot is unstuck


  holonomic_robot: false                  # Set to false since differential driven robot are non holonomic
  
  # Goal tolerance parameters
  xy_goal_tolerance: 0.1                  # Distance around the goal in which the robot is considered to have reached the goal
  yaw_goal_tolerance: 0.05                # Angle around the goal orientation in which the robot is considered to have reached the goal
  latch_xy_goal_tolerance: true           # Set to true to prevent the robot to reached the goal if it has already reached.
  
  # Foward simulation parameters
  sim_time: .0
  sim_granularity: 0.05                  # Distance between steps in each trajectory
  angular_sim_granularity: 0.01
  vx_samples: 20                           # Number of trajectory evaluated evaluation between min_vel_x and max_vel_x
  vtheta_samples: 40                      # Number of trajectory evaluated over min_vel_theta to 1max_vel_theta for each vx_samples
  controller_frequency: 20.0

 # Trajectory scoring parameters
 # cost = pdist_scale * (dist_trajectoryEnd_to_path) + gdist_scale * (dist_trajectoryEnd_to_localGoal) + occdist_sclae * (maximum obstacle cost along the trajectory cost (0-254))
  meter_scoring: true
  path_distance_bias: 4.0                 # The weighting for how much the controller should stay close to the path it was given, maximal possible value is 5.0
  goal_distance_bias: 2.0                          # The weighting for how much the controller should attempt to reach its local goal, also controls speed, maximal possible value is 5.0
  occdist_scale: 0.01                     # The weighting for how much the controller should attempt to avoid obstacles
  heading_lookahead: 0.7                  # How far to look ahead in meters when scoring different in-place-rotation trajectories
  
  heading_scoring: true                   # Whether to score based on the robot's heading to the path or its distance from the path
  heading_scoring_timestep : 0.5          # heading_scoring_timestep
  dwa: false                              # Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout
  publish_cost_grid_pc: true              # Whether or not to publish the cost grid that the planner will use when planning. When true, a sensor_msgs/PointCloud2 will be available on the ~<name>/cost_cloud topic. Each point cloud represents the cost grid and has a field for each individual scoring function component as well as the overall cost for each cell, taking the scoring parameters into account.
  global_frame_id: $(arg robot_name)/odom # The frame to set for the cost_cloud. Should be set to the same frame as the local costmap's global frame.
  
  prune_plan: true                        # Defines whether or not to eat up the plan as the robot moves along the path. If set to true, points will fall off the end of the plan once the robot moves 1 meter past them.

  # Osciillation prevention parameters
  oscillation_reset_dist: 0.001           # How far the robot must travel in meters before oscillation flags are reset

